# Probabilistic Multiple Alignment Program for DNA, codon, and amino-acid sequences (i.e. PRANK)

PRANK website: http://wasabiapp.org/software/prank/#Using_PRANK
PRANK (for Windows):

1) Install Cygwin terminal, select packages during installation (ex. unzip)
2) Ensure Cygwin is installed at 'C:\cygwin64'
2) Download PRANK zip file
3) Move PRANK zip file into the Cygwin directory 'C:\cygwin64\home\username'

Note: [All files should be in one directory (analysis) ... \home\username\analysis]

4) Open Cygwin and type the commands:
	> cd
	> unzip prank.cygwin.*.zip 

5) Start/run PRANK within Cygwin terminal with the command:
   -F = algorithm does not incorrectly penalise for gaps for insertions but it will also not guarantee to leave the insertions unmatched
   -showxml = specifies that the output is also written in HSAML format, compatible for Wasabi import (including the alignment phylogeny)
	> ./prank.cygwin/prank/bin/prank -d=[input_file] -t=[tree_file] -o=[output_file] -F -showxml

6) Run PRANK with Alison's suggestions for parameters (-DNA, -codon, -once)
   -codon = codon alignment
   -DNA =  PRANK attempts to back-translate the input protein alignment to the corresponding DNA alignment
   -once = disables default iteration
	> ./prank.cygwin/prank/bin/prank -d=[input_file] -t=[tree_file] -o=[output_file] -codon -DNA -once
	> ./prank.cygwin/prank/bin/prank -d=cob-1.stripped.cdna.fa -t=rooted_tree.txt -o=output_file_cob -codon -DNA -once

To run python script that uses PRANK:
- Move all files into /home/Smpar/analysis/prank.cygwin/prank/bin
- Need to have PRANK linked within Python script (example below)
- Run like a normal python script on an HPC
	> python convert3.py -i phylip_input -u ".Nrm.fa"

Example from script that converts FASTA to PHYLIP file format (convert3.py):
def main():
    '''Main runs only when the file itself is executed.
    If a part of the script is imported, main will not be executed.'''
    makeprankrun = []
    infiles = list_folder(args.infolder)
    print(infiles)
    # Creates the prank commands for each file supplied.
    for infile in infiles:
        for inf in list_files(infile):
            print(inf)
            outpath = os.path.dirname(inf)
            outfile = outpath + "/" + os.path.dirname(inf).split("/")[-1].split(".")[0]
            makeprankrun.append(["./prank", "-convert", "-d=" + inf,
                                 "-f=paml",
                                 "-o=" + outfile,
                                 "-keep"
                                 ])

    # Passes the makeprankrun commands (a list of lists) to the exec_commands
    # function and executes them in parallel.
    exec_in_row(makeprankrun)


if __name__ == "__main__":
    main()
